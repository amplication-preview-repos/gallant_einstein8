/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StationComparison as PrismaStationComparison,
} from "@prisma/client";

export class StationComparisonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StationComparisonCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stationComparison.count(args);
  }

  async stationComparisons(
    args: Prisma.StationComparisonFindManyArgs
  ): Promise<PrismaStationComparison[]> {
    return this.prisma.stationComparison.findMany(args);
  }
  async stationComparison(
    args: Prisma.StationComparisonFindUniqueArgs
  ): Promise<PrismaStationComparison | null> {
    return this.prisma.stationComparison.findUnique(args);
  }
  async createStationComparison(
    args: Prisma.StationComparisonCreateArgs
  ): Promise<PrismaStationComparison> {
    return this.prisma.stationComparison.create(args);
  }
  async updateStationComparison(
    args: Prisma.StationComparisonUpdateArgs
  ): Promise<PrismaStationComparison> {
    return this.prisma.stationComparison.update(args);
  }
  async deleteStationComparison(
    args: Prisma.StationComparisonDeleteArgs
  ): Promise<PrismaStationComparison> {
    return this.prisma.stationComparison.delete(args);
  }
}
